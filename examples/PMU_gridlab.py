from synchrophasor.pmu import Pmu
from synchrophasor.pmu import ConfigFrame2

"""
tinyPMU will listen on ip:port for incoming connections.
When tinyPMU receives command to start sending
measurements - fixed (sample) measurement will
be sent.
"""

import csv
import random

count = 0
i = 0

# Here we open the .csv file generated by gridlab-d. Please provide a valid path to the file where gridlab-d is installed.
with open('/home/amit/gridlab/gridlab-d/models/branch_1_voltages.csv') as csvfile:
          reader = csv.reader(csvfile, delimiter=' ', quotechar='|')
     # reader = csv.reader(csvfile, delimiter=' ')
          lisread = []
          for row in reader:
                lisread.append(row)

          lisread2 = []
          for row in lisread[9:]:
                lisread2.append(row[2])

          reader2 = csv.reader(lisread2, delimiter=',')
          lisvol = []
          for row in reader2:
                lisvol.append(row[1])

# val() gives out a value everytime it is called from the .csv file it is reading.

def val():
          global i
          global count
          if (i == 0):
              i = i +1
              return lisvol[count]
          elif (count < 150):
              count = count +1
              return lisvol[count]
          else :
              return lisvol[151]



if __name__ == "__main__":
# Here we create a pmu server that will listen to port 1420 on localhost (127.0.0.1)
    pmu = Pmu(ip="127.0.1.10", port=1420)
    pmu.logger.setLevel("DEBUG")

# Here we define a configuration frame to send it to pdc

    cfg = ConfigFrame2(1410,  # PMU_ID
                       1000000,  # TIME_BASE
                       1,  # Number of PMUs included in data frame
                       "Random Station",  # Station name
                       1410,  # Data-stream ID(s)
                       (True, True, True, True),  # Data format - POLAR; PH - REAL; AN - REAL; FREQ - REAL;
                       3,  # Number of phasors
                       1,  # Number of analog values
                       1,  # Number of digital status words
                       ["VA", "VB", "VC", "ANALOG1", "BREAKER 1 STATUS",
                        "BREAKER 2 STATUS", "BREAKER 3 STATUS", "BREAKER 4 STATUS", "BREAKER 5 STATUS",
                        "BREAKER 6 STATUS", "BREAKER 7 STATUS", "BREAKER 8 STATUS", "BREAKER 9 STATUS",
                        "BREAKER A STATUS", "BREAKER B STATUS", "BREAKER C STATUS", "BREAKER D STATUS",
                        "BREAKER E STATUS", "BREAKER F STATUS", "BREAKER G STATUS"],  # Channel Names
                       [(0, "v"), (0, "v"),
                        (0, "v")],  # Conversion factor for phasor channels - (float representation, not important)
                       [(1, "pow")],  # Conversion factor for analog channels
                       [(0x0000, 0xffff)],  # Mask words for digital status words
                       50,  # Nominal frequency
                       1,  # Configuration change count
                       5)  # Rate of phasor data transmission)

    pmu.set_configuration(cfg)
    pmu.set_header("Hey! I'm randomPMU! Guess what? I'm sending random measurement values!")

    pmu.run()

# Here we send the dataframe to send it to pdc. Here we pass the values that were extracted from gridlab-d .csv files by calling val().

    while True:
        if pmu.clients:
            pmu.send_data(phasors=[(val(), random.uniform(-0.1, 0.3)),
                                   (val(), random.uniform(1.9, 2.2)),
                                   (val(), random.uniform(3.0, 3.14))],
                          analog=[9.91],
                          digital=[0x0001])

    pmu.join()





